PROBLEM STATEMENT:

The Byzantine Generals Problem is a way to model the reliability of computer systems, namely
distributed systems.

We imagine there are multiple division of the Byzantine army sieging a city, with each division
being led by a general. The generals can only communicate by messenger. The generals need to 
decide and agree on a plan. Unfortunately there can be traitorous generals trying to prevent the 
generals coming to an agreement. The generals have to come up with an algorithm to guarantee that:

    A) All loyal generals decide upon the same plan of action.
    B) A small number of traitors cannot cause the loyal generals to adopt a bad plan.

Loyal generals will follow the algorithm, while traitors will do what they wish.

It is hard to quantify what a "bad" plan is, so the paper does not try and qualify it. Instead they
explore how the generals can reach a decision. Let there be n generals and v(i) be the information
sent by the ith general. A general has to use some method of taking all of the plans communicated to
them, v(1),...,v(n), and combining them into one plan. Having all of the generals use the same
method of combining the information will meet Condition A.

To simplify the problem, we say that the plan can only be whether to attack or to retreat, making
v(i) General i's opinion on which of the two options is the best. So each general can take a
majority vote of v(1),...,v(n) and decide that whichever option wins is the best. This method only
lets a small number of traitors affect the result if the loyal generals are split on the two options,
in which case neither decision can be deemed "bad". So to satisfy Condition B, we must use a robust
algorithm that makes it difficult for a small number of traitors to disrupt the plan.

To ensure that Condition A and Condition B are met, we need to meet two other conditions:

    1) Every loyal general must obtain the same information v(1),...,v(n).
    2) If the ith general is loyal, then the value that he sends must be used by every loyal general
       as teh value of v(i).

These are important because a loyal general cannot take a value v(i) at face value, because a
traitorous general could send different values of v(i) to different generals. Even though the
generals cannot necessarily trust every message, we must find a way to guarantee that loyal generals
use the values sent to them by other generals.

Condition 1 can be rewritten as:

    1'. For every i, any two loyal generals use the same value of v(i).

Since Condition 1' and Condition 2 are both contingent on a single v(i) sent by the ith general, we
can focus on how a single general sends values to others. We phrase this problem by referring to a
commander sending messages to his lieutenants.

Byzantine Generals Problem. A Commanding general must send an order to his n - 1 lieutenants such that

    IC1. All loyal lieutenants obey the same order.
    IC2. If the commander is loyal, then every loyal lieutenant obeys the order he sends.

Conditions IC1 and Condition IC2 are called the interactive consistency conditions. // TODO: define that.

If the commander is loyal, then IC1 follows IC2. However, the commander can be a traitor.

----------------------------------------------------------------------------------------------------

THREE GENERALS:

When sending only oral messages, at least two thirds of the lieutenants must be loyal for any
solution to work. The distinction of oral message is important, as it means that the contents of a
message is completely up to sender. So a traitorous sender can send any message it wants.

We will look at the simplest form of this problem, where there is three generals (one commander and
two lieutenants). There are two possible orders: "attack" or "retreat". No solution can exist for
this if there is a single traitor.

Situation 1: The commander is loyal, but one of the lieutenants is a traitor. 

    The commander sends out the command "attack" to both lieutenants. Both lieutenants rely the order
    they receive to the other, but since one lieutenant is a traitor, they rely the message "retreat".
    The loyal lieutenant receives the set of orders: {"attack", "retreat"}, there is no way for him
    to decide which is the correct order. 

// TODO: create a diagram for this.

Situation 2: The commander is not loyal, both lieutenants are.

    The commander sends "attack" to Lieutenant 1 and "retreat" to Lieutenant 2. Since they are both loyal
    they rely the commands to the other. Lieutenant 1 receives the set of orders: {"attack", "retreat"}.

    Since Lieutenant 1 receives the set of orders: {"attack", "retreat"} in both situations, there is no
    way for him to know who they traitor is, so he follows his commander's orders to attack in both
    situations, regardless of if the commander is a traitor.

    We can make a similar argument that Lieutenant 2 must follow the "retreat" command in the second
    situation. This violates IC1 since the two loyal lieutenants obey different orders.

// There is a proof for the three-generals problem by Diffie and Hellman
// Maybe include it (probably don't)

Albanian General's Proof (not a rigorous proof, so probably don't want to word it this way)

To avoid confusion, the generals from Diffie and Hellman's result will be referred to as Byzantine
generals. The generals in our constructed solution will be referred as Albanian generals.

Using the result from Diffie and Hellman we can show that no solution with fewer than 3m+1 generals
can cope with m traitors, with n > 3 generals. 
We will prove this by contradiction. 
We will refer to the generals from Diffie and Hellman's results as Byzantine generals and the 
generals in this assumed solution as Albanian generals.

Assume n <= 3m Albanian generals can handle m traitors. We simulate this by allowing a solution of
3 Byzantine generals that can handle 1 traitor.

Let each of the Byzantine generals simulate at most m Albanian generals. The Byzantine commander
simulates the Albanian commander and at most m-1 Albanian lieutenants. Each of the Byzantine
lieutenants at most m Albanian lieutenants. We know that there can be only one Byzantine traitor,
so it follows that there can be at most m traitorous Albanian generals.

// TODO: finish this

// TODO: Add the part about the approximate.

----------------------------------------------------------------------------------------------------

ORAL SOLUTION:

The above section shows that we need at least 3m+1 generals to solve the Byzantine Generals Problem
using oral messages, with m traitors.  In this section we will show a solution that will work for
3m+1 or more generals. 

We make three assumptions for oral messages:

    A1) Every message that is sent is delivered correctly.
    A2) The receiver of a message knows who sent it.
    A3) The absence of a message can be detected.

This assumptions each help prevent foul play by traitorous generals. A1 prevents generals from
stopping messages from being received. A2 make it to where a general cannot impersonate another.
A3 stops traitors who try and prevent a decision by not sending messages.

For this problem we assume that every general is able to send a message to every other general. We
will discuss later about when that is not the case. We also assume that every loyal general completes
their algorithm. In the case of a traitorous general who does not send any orders at all, we assume
that lieutenants default to the "retreat" order.

We will define an algorithm for oral messages OM(m), for all nonnegative integers m. In this algorithm
a commander sends an order to n-1 lieutenants. OM(m) will solve the Byzantine Generals Problem for
3m+1 more generals with at most m traitors.

As stated above, when a general receives a message, or a value, from a general, we denote it as v(i)
for the ith general. Whenever a general has a set of all the messages, {v(1),...,v(n)}, they use a 
majority function majority({v1,...,vn}) = v, v being the decision the lieutenant comes too. Two choices 
for deciding the majority listed in the paper are:

    1) The majority value among the v(i) (the value that occurs the most) if one exists, or default 
       to the value "retreat".
    2) The median value of the v(i), if they come from an ordered set.

The algorithm is straight recursive, so we start with the base case of OM(0).

Algorithm OM(0)
    1) The commander sends his value to every lieutenant.
    2) Each lieutenant uses the value he received from the commander. If he received no value, default
       to "retreat".

Algorithm OM(m), m > 0
    1) The commander sends his value to every lieutenant.
    2) For each i,
        a) Lieutenant i receives a value v(i) from the commander. Default to "retreat"
           if he receives no value.
        b) Lieutenant i acts as the commander in OM(m-1) to send the message to each of the remaining
           n-2 lieutenants.
    3) For each i, and each j not equal to i, 
        a) let v(j) be the value Lieutenant i received from
           Lieutenant j in step (2b). Default to "retreat" if Lieutenant i received no value from
           Lieutenant j.
        b) Lieutenant i uses the value majority({v(1),...,v(n-1)}).

// TODO: make a diagram demonstrating this

Let's look at an example with four generals and one traitor, or n = 4 and m = 1. There are two
situations, one of the lieutenants is a traitor or the commander is a traitor.

// TODO: make the diagrams for these situations.

Situation 1: Lieutenant 3 is a traitor.

    In the first step of the algorithm OM(1), the commander sends the order x to all three lieutenants.
    In the second step, Lieutenant 1 sends the value v to Lieutenant 2 using OM(0). Lieutenant 3 sends
    y to Lieutenant 2. In step 3, Lieutenant 2 has the set of orders v(1)=v(2)=x and v(3)=y. Using
    majority({x, x, y}) = x, Lieutenant 2 follows the order x sent to him by the commander. We can use
    a similar process to find that Lieutenant 1 also follows order x. So both loyal lieutenants followed
    the order of their loyal commander.

Situation 2: The commander is a traitor.

    The commander sends the arbitrary orders x, y, z to Lieutenants 1, 2, 3 respectively. In step 2 each
    lieutenant sends the order they got to the others. In step 3 each lieutenant ends up with v(1)=x,
    v(2)=y, v(3)=z and the majority function majority({x,y,z}). So they each will follow the same order
    irregardless of if the values of x, y, z are equal to one another or not.

Before we can prove that the algorithm OM(m) works for an arbitrary m, we first need to prove the
following lemma.

Lemma 1. For any m and k, Algorithm OM(m) satisfies IC2 if there are more than 2k+m generals and at
most k traitors.

    Proof. We will prove this by induction on m. 
    IC2 only cares when the commander is loyal. Using A1, we know that every message is delivered
    correctly. OM(0) works if the commander is loyal, since the lieutenants all receive the order. So
    it holds true for m = 0.
    Now we assume it is true for m-1, m>0, and will prove for m.
    In step 1, the loyal commander sends a value v to all n - 1 lieutenants. Each loyal lieutenant calls
    OM(m-1) with n-1 generals. We know n>2k+1, so we know n-1>2k+m-1 or n-1>2k+(m-1). We use the inductive
    hypothesis and conclude that every loyal lieutenant gets v(j)=v for each loyal Lieutenant j. Since
    n-1>2k+(m-1)>=2k and we know there is at most k traitors, the majority of n-1 lieutenants are loyal.
    So every loyal lieutenant gets v(i)=v for a majority of the n-1 values i. This gives him 
    majority(v(1),...,v(n-1)) in step 2. This proves IC2.
// TODO: revisit this proof

Theorem 1. For any m, Algorithm OM(m) satisfies conditions IC1 and IC2 if there are more than 3m
generals and at most m traitors.

    Proof. We prove this using induction on m.
    It is simple to see that OM(0) satisfies IC1 and IC2 if there are no traitors.
    Assume the theorem is true for OM(m-1) and prove it for OM(m), when m > 0.

        Case 1: The commander is loyal. Use Lemma 1 and set k equal to m. 
            n > 2k + m => n > 3k.
            We see that OM(m) satisfies IC2, and IC1 follows if the commander is loyal.
    
        Case 2: The commander is a traitor. 
            We know there is at most m traitors, since one is the commander, there is at most m - 1
            traitorous lieutenants. We also know that there are more than 3m generals, therefore there
            are more than 3m-1 lieutenants. 3m-1 > 3(m-1). We can apply the inductive hypothesis and
            see that O(m-1) meets both IC1 and IC2. Since IC2 is satisfies, we know every loyal
            lieutenant receives the same set of values v1,...v(n-1). Therefore they come to the same
            value using the majority(v1,...,v(n-1)) function, proving IC1.

----------------------------------------------------------------------------------------------------

SIGNED MESSAGES:  // TODO:

    A4) a) A loyal general's signature cannot be forged, and any alterations of the contents of his
           signed messages can be detected.
        b) Anyone can verify the authenticity of a general's signature.

No assumptions are made about traitors' signature. It is possible for traitors to forge another
traitor's signature and to collude in that manner.

This new algorithm is able to cope with m traitors for any amount of generals. The author notes 
that it does not make much sense for less than m+2 generals.

Choice function:
    1) If the set V consists of the single element v, then choice(V) = v.
    2) If the set V is the empty set, then the choice is "retreat".

// TODO: maybe explain the choice function more.

In the algorithm we denote the value x signed by General i as x:i. That means v:j:i would be the 
value v signed by General j and then signed by General i. Each General i maintains a set of properly
signed orders Vi. A loyal commander should never have more than one element in Vi. Vi is specifically
the set of orders a general has received, not the set of messages he has received.

Algorithm SM(m):
    Initially V(i)={}
    1) The commander signs and sends his value to every lieutenant.
    2) For each i,
        a) If Lieutenant i receives a message from the commander of form v:0 and he has not received
           any other order, then:
            i)  he sets V(i) = {v}
            ii) he sends the message v:0:i to every other lieutenant
        b) If Lieutenant i receives a message of the form v:0:j(1):...:j(k) and v is not in V(i), then
            i)  he adds v to V(i)
            ii) if k < m, then he sends the message v:0:j(1):...:j(k):i to every other lieutenant,
                except for j(1):...:j(k)
    3) For each i, when Lieutenant i receives no more messages, he follows the result from choice(V(i))

// TODO: add explanation and diagram for this algorithm

To help determine when a lieutenant will receive no more messages

Theorem 2: For any m, Algorithm SM(m) solves the Byzantine Generals Problem if there are at most m
traitors.
// TODO: maybe add a note here saying we only care when there is at least 2 loyal generals. Since it
         is a dumb problem if there is only 1 or 0 loyal generals.

    Proof. 
    We first prove IC2. If the commander is loyal, he sends his signed order v:0 to every lieutenant
    in step 1. This means that every loyal lieutenant will receive the order v in step 2a. According
    to assumption A4, a loyal general's signature cannot be forged. So no traitorous general can
    forge a message v':0, so a loyal lieutenant cannot receive any additional orders in step 2b. 
    Every loyal Lieutenant i will contain the single order v in the set Vi. In step three they will
    follow v in accordance with the first property of the choice function. This proves IC2.

    // TODO: make sure i replaced all i and j with a and b
    Now we prove IC1. We only need to prove IC1 when the commander is a traitor because IC1 follows
    IC2 when the commander is loyal. Two loyal generals, a and b, will follow the same order in step 3 if the
    set of orders they receive in step 2, Va and Vb, are the same. We need to prove that if a puts an order v
    in Va then b must put the same order v in Vb. There are two possibilities in step 2. The first
    option is a receives the message v:0 directly from the commander. He adds the order to Va (2ai)
    then sends the message v:0:a to every other general, including b. So we know b receives the order v.
    The other option is if a receives a message in the form of v:0:j1:...:jk. If b is contained in
    j1...jk, then we know b has already received the order (due to A4). If not, we must consider two
    cases:
        1) k < m. In this case, a will send the message v:0:j1:...:jk:a to b, so we know b receives v.

        2) k = m. We know the commander is a traitor, which means there is at most m - 1 traitorous
        lieutenants. // TODO: finish this

----------------------------------------------------------------------------------------------------

MISSING COMMUNICATION PATHS: // TODO:

So far we have assumed that every general could message every other general directly. In the real 
world that is very rarely the case. Now we will explore extensions of OM(m) and SM(m) that can handle missing communication
links. To do this we will represent the generals as nodes in a simple, undirected graph, G, with the edges
representing lines of communication. 

Definition of regular neighbors, p-regular graph
    Definition 1.
        a) A set of nodes {i1,...,ip} is said to be a regular set of neighbors of a node i if
            i) each ij is a neighbor of i, and
            ii) for any general k different from i, there exists paths γj,k from ij to k not passing
                through i such that any two different paths γj,k have no node in common other than k.
        b) The graph G is said to be p-regular if every node has a regular set of neighbors consisting
           of p distinct nodes.

// TODO: have examples of a p-regular graph and a none p-regular graph

First we will extend OM(m) to an algorithm that solves the Byzantine Generals Problem with m traitors
if the graph of generals, G, is 3m-regular. As a note, a 3m-regular graph needs to contain at least
3m+1 nodes. We will define an algorithm OM(m,p) that works for all positive integers m and p and with
a regular graph G. This algorithm will not work if G is not p-regular.

Algorithm OM(m,p): // TODO:
    0) Choose a regular set N of neighbors of the commander consisting of p lieutenants.
    1) The commander sends his value to every lieutenant in N.
    2) For each i in N, let vi be the value Lieutenant i receives from the commander, or else
       RETREAT if he receives no value. Lieutenant i sends vi to every other lieutenant k as follows:
       A) If m = 1, then by sending the value along the path γi,k whose existence is guaranteed by
          part (a)(ii) of Definition 1 (regular set of neighbors).
       B) If m > 1, then by acting as the commander in the algorithm OM(m-1, p-1), with the graph of

          generals obtained by removing the original commander from G.
    3) For each k, and each i in N with i != k, let vi be the value Lieutenant k received from
       Lieutenant i in step (2), or RETREAT if he received no value. Lieutenant k uses the value
       majority(vi1,...,vip), where N = {i1,...,ip}.

Lemma 2:
// TODO:

Theorem 3:
// TODO:

Theorem 4:
// TODO:

Corollary:
// TODO:

----------------------------------------------------------------------------------------------------

APPLICATIONS: // TODO:

- reliable systems
- block chain